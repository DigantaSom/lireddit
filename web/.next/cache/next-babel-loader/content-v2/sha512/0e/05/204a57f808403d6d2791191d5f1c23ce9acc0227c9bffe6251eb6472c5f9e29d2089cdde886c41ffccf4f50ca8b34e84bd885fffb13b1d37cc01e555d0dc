{"ast":null,"code":"import _defineProperty from \"D:/Web Development/GraphQL/lireddit (apollo)/web/node_modules/next/node_modules/@babel/runtime/helpers/esm/defineProperty\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nimport _slicedToArray from \"D:/Web Development/GraphQL/lireddit (apollo)/web/node_modules/next/node_modules/@babel/runtime/helpers/esm/slicedToArray\";\nimport _objectWithoutProperties from \"D:/Web Development/GraphQL/lireddit (apollo)/web/node_modules/next/node_modules/@babel/runtime/helpers/esm/objectWithoutProperties\";\n\nvar _jsxFileName = \"D:\\\\Web Development\\\\GraphQL\\\\lireddit (apollo)\\\\web\\\\src\\\\components\\\\InputField.tsx\",\n    _this = this,\n    _s = $RefreshSig$();\n\nfunction ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }\n\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }\n\nimport { FormControl, FormErrorMessage, FormLabel } from '@chakra-ui/form-control';\nimport { Input } from '@chakra-ui/input';\nimport { useField } from 'formik';\n\nvar InputField = function InputField(_ref) {\n  _s();\n\n  var label = _ref.label,\n      props = _objectWithoutProperties(_ref, [\"label\"]);\n\n  var _useField = useField(props),\n      _useField2 = _slicedToArray(_useField, 2),\n      field = _useField2[0],\n      error = _useField2[1].error;\n\n  return /*#__PURE__*/_jsxDEV(FormControl, {\n    isInvalid: false,\n    children: [/*#__PURE__*/_jsxDEV(FormLabel, {\n      htmlFor: field.name,\n      children: label\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 15,\n      columnNumber: 7\n    }, _this), /*#__PURE__*/_jsxDEV(Input, _objectSpread(_objectSpread({}, field), {}, {\n      id: field.name\n    }), void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 16,\n      columnNumber: 7\n    }, _this), error && /*#__PURE__*/_jsxDEV(FormErrorMessage, {\n      children: error\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 17,\n      columnNumber: 17\n    }, _this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 14,\n    columnNumber: 5\n  }, _this);\n};\n\n_s(InputField, \"DpPuTb9nPdu6NyyZR63Xu5KSrwc=\", false, function () {\n  return [useField];\n});\n\n_c = InputField;\nexport default InputField;\n\nvar _c;\n\n$RefreshReg$(_c, \"InputField\");","map":{"version":3,"sources":["D:/Web Development/GraphQL/lireddit (apollo)/web/src/components/InputField.tsx"],"names":["FormControl","FormErrorMessage","FormLabel","Input","useField","InputField","label","props","field","error","name"],"mappings":";;;;;;;;;;;;;AAAA,SAASA,WAAT,EAAsBC,gBAAtB,EAAwCC,SAAxC,QAAyD,yBAAzD;AACA,SAASC,KAAT,QAAsB,kBAAtB;AACA,SAASC,QAAT,QAAyB,QAAzB;;AAOA,IAAMC,UAAqC,GAAG,SAAxCA,UAAwC,OAAyB;AAAA;;AAAA,MAAtBC,KAAsB,QAAtBA,KAAsB;AAAA,MAAZC,KAAY;;AAAA,kBAC1CH,QAAQ,CAACG,KAAD,CADkC;AAAA;AAAA,MAC9DC,KAD8D;AAAA,MACrDC,KADqD,iBACrDA,KADqD;;AAGrE,sBACE,QAAC,WAAD;AAAa,IAAA,SAAS,EAAE,KAAxB;AAAA,4BACE,QAAC,SAAD;AAAW,MAAA,OAAO,EAAED,KAAK,CAACE,IAA1B;AAAA,gBAAiCJ;AAAjC;AAAA;AAAA;AAAA;AAAA,aADF,eAEE,QAAC,KAAD,kCAAWE,KAAX;AAAkB,MAAA,EAAE,EAAEA,KAAK,CAACE;AAA5B;AAAA;AAAA;AAAA;AAAA,aAFF,EAGGD,KAAK,iBAAI,QAAC,gBAAD;AAAA,gBAAmBA;AAAnB;AAAA;AAAA;AAAA;AAAA,aAHZ;AAAA;AAAA;AAAA;AAAA;AAAA,WADF;AAOD,CAVD;;GAAMJ,U;UACuBD,Q;;;KADvBC,U;AAYN,eAAeA,UAAf","sourcesContent":["import { FormControl, FormErrorMessage, FormLabel } from '@chakra-ui/form-control';\r\nimport { Input } from '@chakra-ui/input';\r\nimport { useField } from 'formik';\r\n\r\ntype InputFieldProps = {\r\n  label: string;\r\n  name: string;\r\n};\r\n\r\nconst InputField: React.FC<InputFieldProps> = ({ label, ...props }) => {\r\n  const [field, { error }] = useField(props);\r\n\r\n  return (\r\n    <FormControl isInvalid={false}>\r\n      <FormLabel htmlFor={field.name}>{label}</FormLabel>\r\n      <Input {...field} id={field.name} />\r\n      {error && <FormErrorMessage>{error}</FormErrorMessage>}\r\n    </FormControl>\r\n  );\r\n};\r\n\r\nexport default InputField;\r\n"]},"metadata":{},"sourceType":"module"}