{"ast":null,"code":"import { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nvar _jsxFileName = \"D:\\\\Web Development\\\\GraphQL\\\\lireddit (apollo)\\\\web\\\\src\\\\pages\\\\register.tsx\";\nimport { Button } from '@chakra-ui/button';\nimport { Box } from '@chakra-ui/layout';\nimport { Form, Formik } from 'formik';\nimport { useRouter } from 'next/router';\nimport InputField from '../components/InputField';\nimport Wrapper from '../components/Wrapper';\nimport { MeDocument, useRegisterMutation } from '../generated/graphql';\nimport { toErrorMap } from '../utils/toErrorMap';\n\nconst Register = () => {\n  const [register] = useRegisterMutation();\n  const router = useRouter();\n  return /*#__PURE__*/_jsxDEV(Wrapper, {\n    variant: \"small\",\n    children: /*#__PURE__*/_jsxDEV(Formik, {\n      initialValues: {\n        username: '',\n        email: '',\n        password: ''\n      },\n      onSubmit: async (values, {\n        setErrors\n      }) => {\n        var _response$data, _response$data2;\n\n        const response = await register({\n          variables: {\n            options: values\n          },\n          update: (cache, {\n            data\n          }) => {\n            cache.writeQuery({\n              query: MeDocument,\n              data: {\n                __typename: 'Query',\n                me: data === null || data === void 0 ? void 0 : data.register.user\n              }\n            });\n          }\n        });\n\n        if ((_response$data = response.data) !== null && _response$data !== void 0 && _response$data.register.errors) {\n          setErrors(toErrorMap(response.data.register.errors));\n        } else if ((_response$data2 = response.data) !== null && _response$data2 !== void 0 && _response$data2.register.user) {\n          // worked\n          router.replace('/');\n        }\n      },\n      children: ({\n        isSubmitting\n      }) => /*#__PURE__*/_jsxDEV(Form, {\n        children: [/*#__PURE__*/_jsxDEV(Box, {\n          mt: 4,\n          children: /*#__PURE__*/_jsxDEV(InputField, {\n            label: \"Username\",\n            name: \"username\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 44,\n            columnNumber: 15\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 43,\n          columnNumber: 13\n        }, this), /*#__PURE__*/_jsxDEV(Box, {\n          mt: 4,\n          children: /*#__PURE__*/_jsxDEV(InputField, {\n            label: \"Email\",\n            name: \"email\",\n            type: \"email\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 47,\n            columnNumber: 15\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 46,\n          columnNumber: 13\n        }, this), /*#__PURE__*/_jsxDEV(Box, {\n          mt: 4,\n          children: /*#__PURE__*/_jsxDEV(InputField, {\n            label: \"Password\",\n            name: \"password\",\n            type: \"password\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 50,\n            columnNumber: 15\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 49,\n          columnNumber: 13\n        }, this), /*#__PURE__*/_jsxDEV(Button, {\n          type: \"submit\",\n          colorScheme: \"teal\",\n          mt: 4,\n          isLoading: isSubmitting,\n          children: \"Register\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 52,\n          columnNumber: 13\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 42,\n        columnNumber: 11\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 16,\n      columnNumber: 7\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 15,\n    columnNumber: 5\n  }, this);\n};\n\nexport default Register;","map":{"version":3,"sources":["D:/Web Development/GraphQL/lireddit (apollo)/web/src/pages/register.tsx"],"names":["Button","Box","Form","Formik","useRouter","InputField","Wrapper","MeDocument","useRegisterMutation","toErrorMap","Register","register","router","username","email","password","values","setErrors","response","variables","options","update","cache","data","writeQuery","query","__typename","me","user","errors","replace","isSubmitting"],"mappings":"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","sourcesContent":["import { Button } from '@chakra-ui/button';\r\nimport { Box } from '@chakra-ui/layout';\r\nimport { Form, Formik } from 'formik';\r\nimport { useRouter } from 'next/router';\r\nimport InputField from '../components/InputField';\r\nimport Wrapper from '../components/Wrapper';\r\nimport { MeDocument, MeQuery, useRegisterMutation } from '../generated/graphql';\r\nimport { toErrorMap } from '../utils/toErrorMap';\r\n\r\nconst Register = () => {\r\n  const [register] = useRegisterMutation();\r\n  const router = useRouter();\r\n\r\n  return (\r\n    <Wrapper variant='small'>\r\n      <Formik\r\n        initialValues={{ username: '', email: '', password: '' }}\r\n        onSubmit={async (values, { setErrors }) => {\r\n          const response = await register({\r\n            variables: {\r\n              options: values,\r\n            },\r\n            update: (cache, { data }) => {\r\n              cache.writeQuery<MeQuery>({\r\n                query: MeDocument,\r\n                data: {\r\n                  __typename: 'Query',\r\n                  me: data?.register.user,\r\n                },\r\n              });\r\n            },\r\n          });\r\n\r\n          if (response.data?.register.errors) {\r\n            setErrors(toErrorMap(response.data.register.errors));\r\n          } else if (response.data?.register.user) {\r\n            // worked\r\n            router.replace('/');\r\n          }\r\n        }}>\r\n        {({ isSubmitting }) => (\r\n          <Form>\r\n            <Box mt={4}>\r\n              <InputField label='Username' name='username' />\r\n            </Box>\r\n            <Box mt={4}>\r\n              <InputField label='Email' name='email' type='email' />\r\n            </Box>\r\n            <Box mt={4}>\r\n              <InputField label='Password' name='password' type='password' />\r\n            </Box>\r\n            <Button type='submit' colorScheme='teal' mt={4} isLoading={isSubmitting}>\r\n              Register\r\n            </Button>\r\n          </Form>\r\n        )}\r\n      </Formik>\r\n    </Wrapper>\r\n  );\r\n};\r\n\r\nexport default Register;\r\n"]},"metadata":{},"sourceType":"module"}