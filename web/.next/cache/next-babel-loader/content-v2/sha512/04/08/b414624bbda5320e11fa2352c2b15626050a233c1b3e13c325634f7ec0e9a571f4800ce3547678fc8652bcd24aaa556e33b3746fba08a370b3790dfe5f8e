{"ast":null,"code":"import { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nvar _jsxFileName = \"D:\\\\Web Development\\\\GraphQL\\\\lireddit (apollo)\\\\web\\\\src\\\\pages\\\\login.tsx\";\nimport { Button } from '@chakra-ui/button';\nimport { Box } from '@chakra-ui/layout';\nimport { Form, Formik } from 'formik';\nimport { useRouter } from 'next/router';\nimport InputField from '../components/InputField';\nimport Wrapper from '../components/Wrapper';\nimport { MeDocument, useLoginMutation } from '../generated/graphql';\nimport { toErrorMap } from '../utils/toErrorMap';\n\nconst Login = () => {\n  const [login] = useLoginMutation();\n  const router = useRouter();\n  return /*#__PURE__*/_jsxDEV(Wrapper, {\n    variant: \"small\",\n    children: /*#__PURE__*/_jsxDEV(Formik, {\n      initialValues: {\n        usernameOrEmail: '',\n        password: ''\n      },\n      onSubmit: async (values, {\n        setErrors\n      }) => {\n        var _response$data, _response$data2;\n\n        const response = await login({\n          variables: values,\n          update: (cache, {\n            data\n          }) => {\n            cache.writeQuery({\n              query: MeDocument,\n              data: {\n                __typename: 'Query',\n                me: data === null || data === void 0 ? void 0 : data.login.user\n              }\n            });\n          }\n        });\n        console.log('login response:', response);\n\n        if ((_response$data = response.data) !== null && _response$data !== void 0 && _response$data.login.errors) {\n          setErrors(toErrorMap(response.data.login.errors));\n        } else if ((_response$data2 = response.data) !== null && _response$data2 !== void 0 && _response$data2.login.user) {\n          // worked\n          router.replace('/');\n        }\n      },\n      children: ({\n        isSubmitting\n      }) => /*#__PURE__*/_jsxDEV(Form, {\n        children: [/*#__PURE__*/_jsxDEV(Box, {\n          mt: 4,\n          children: /*#__PURE__*/_jsxDEV(InputField, {\n            label: \"Username or Email\",\n            name: \"usernameOrEmail\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 43,\n            columnNumber: 15\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 42,\n          columnNumber: 13\n        }, this), /*#__PURE__*/_jsxDEV(Box, {\n          mt: 4,\n          children: /*#__PURE__*/_jsxDEV(InputField, {\n            label: \"Password\",\n            name: \"password\",\n            type: \"password\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 46,\n            columnNumber: 15\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 45,\n          columnNumber: 13\n        }, this), /*#__PURE__*/_jsxDEV(Button, {\n          type: \"submit\",\n          colorScheme: \"teal\",\n          mt: 4,\n          isLoading: isSubmitting,\n          children: \"Login\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 48,\n          columnNumber: 13\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 41,\n        columnNumber: 11\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 16,\n      columnNumber: 7\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 15,\n    columnNumber: 5\n  }, this);\n};\n\nexport default Login;","map":{"version":3,"sources":["D:/Web Development/GraphQL/lireddit (apollo)/web/src/pages/login.tsx"],"names":["Button","Box","Form","Formik","useRouter","InputField","Wrapper","MeDocument","useLoginMutation","toErrorMap","Login","login","router","usernameOrEmail","password","values","setErrors","response","variables","update","cache","data","writeQuery","query","__typename","me","user","console","log","errors","replace","isSubmitting"],"mappings":";;AAAA,SAASA,MAAT,QAAuB,mBAAvB;AACA,SAASC,GAAT,QAAoB,mBAApB;AACA,SAASC,IAAT,EAAeC,MAAf,QAA6B,QAA7B;AACA,SAASC,SAAT,QAA0B,aAA1B;AACA,OAAOC,UAAP,MAAuB,0BAAvB;AACA,OAAOC,OAAP,MAAoB,uBAApB;AACA,SAASC,UAAT,EAA8BC,gBAA9B,QAAsD,sBAAtD;AACA,SAASC,UAAT,QAA2B,qBAA3B;;AAEA,MAAMC,KAAK,GAAG,MAAM;AAClB,QAAM,CAACC,KAAD,IAAUH,gBAAgB,EAAhC;AACA,QAAMI,MAAM,GAAGR,SAAS,EAAxB;AAEA,sBACE,QAAC,OAAD;AAAS,IAAA,OAAO,EAAC,OAAjB;AAAA,2BACE,QAAC,MAAD;AACE,MAAA,aAAa,EAAE;AAAES,QAAAA,eAAe,EAAE,EAAnB;AAAuBC,QAAAA,QAAQ,EAAE;AAAjC,OADjB;AAEE,MAAA,QAAQ,EAAE,OAAOC,MAAP,EAAe;AAAEC,QAAAA;AAAF,OAAf,KAAiC;AAAA;;AACzC,cAAMC,QAAQ,GAAG,MAAMN,KAAK,CAAC;AAC3BO,UAAAA,SAAS,EAAEH,MADgB;AAE3BI,UAAAA,MAAM,EAAE,CAACC,KAAD,EAAQ;AAAEC,YAAAA;AAAF,WAAR,KAAqB;AAC3BD,YAAAA,KAAK,CAACE,UAAN,CAA0B;AACxBC,cAAAA,KAAK,EAAEhB,UADiB;AAExBc,cAAAA,IAAI,EAAE;AACJG,gBAAAA,UAAU,EAAE,OADR;AAEJC,gBAAAA,EAAE,EAAEJ,IAAF,aAAEA,IAAF,uBAAEA,IAAI,CAAEV,KAAN,CAAYe;AAFZ;AAFkB,aAA1B;AAOD;AAV0B,SAAD,CAA5B;AAYAC,QAAAA,OAAO,CAACC,GAAR,CAAY,iBAAZ,EAA+BX,QAA/B;;AAEA,8BAAIA,QAAQ,CAACI,IAAb,2CAAI,eAAeV,KAAf,CAAqBkB,MAAzB,EAAiC;AAC/Bb,UAAAA,SAAS,CAACP,UAAU,CAACQ,QAAQ,CAACI,IAAT,CAAcV,KAAd,CAAoBkB,MAArB,CAAX,CAAT;AACD,SAFD,MAEO,uBAAIZ,QAAQ,CAACI,IAAb,4CAAI,gBAAeV,KAAf,CAAqBe,IAAzB,EAA+B;AACpC;AACAd,UAAAA,MAAM,CAACkB,OAAP,CAAe,GAAf;AACD;AACF,OAvBH;AAAA,gBAwBG,CAAC;AAAEC,QAAAA;AAAF,OAAD,kBACC,QAAC,IAAD;AAAA,gCACE,QAAC,GAAD;AAAK,UAAA,EAAE,EAAE,CAAT;AAAA,iCACE,QAAC,UAAD;AAAY,YAAA,KAAK,EAAC,mBAAlB;AAAsC,YAAA,IAAI,EAAC;AAA3C;AAAA;AAAA;AAAA;AAAA;AADF;AAAA;AAAA;AAAA;AAAA,gBADF,eAIE,QAAC,GAAD;AAAK,UAAA,EAAE,EAAE,CAAT;AAAA,iCACE,QAAC,UAAD;AAAY,YAAA,KAAK,EAAC,UAAlB;AAA6B,YAAA,IAAI,EAAC,UAAlC;AAA6C,YAAA,IAAI,EAAC;AAAlD;AAAA;AAAA;AAAA;AAAA;AADF;AAAA;AAAA;AAAA;AAAA,gBAJF,eAOE,QAAC,MAAD;AAAQ,UAAA,IAAI,EAAC,QAAb;AAAsB,UAAA,WAAW,EAAC,MAAlC;AAAyC,UAAA,EAAE,EAAE,CAA7C;AAAgD,UAAA,SAAS,EAAEA,YAA3D;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,gBAPF;AAAA;AAAA;AAAA;AAAA;AAAA;AAzBJ;AAAA;AAAA;AAAA;AAAA;AADF;AAAA;AAAA;AAAA;AAAA,UADF;AA0CD,CA9CD;;AAgDA,eAAerB,KAAf","sourcesContent":["import { Button } from '@chakra-ui/button';\r\nimport { Box } from '@chakra-ui/layout';\r\nimport { Form, Formik } from 'formik';\r\nimport { useRouter } from 'next/router';\r\nimport InputField from '../components/InputField';\r\nimport Wrapper from '../components/Wrapper';\r\nimport { MeDocument, MeQuery, useLoginMutation } from '../generated/graphql';\r\nimport { toErrorMap } from '../utils/toErrorMap';\r\n\r\nconst Login = () => {\r\n  const [login] = useLoginMutation();\r\n  const router = useRouter();\r\n\r\n  return (\r\n    <Wrapper variant='small'>\r\n      <Formik\r\n        initialValues={{ usernameOrEmail: '', password: '' }}\r\n        onSubmit={async (values, { setErrors }) => {\r\n          const response = await login({\r\n            variables: values,\r\n            update: (cache, { data }) => {\r\n              cache.writeQuery<MeQuery>({\r\n                query: MeDocument,\r\n                data: {\r\n                  __typename: 'Query',\r\n                  me: data?.login.user,\r\n                },\r\n              });\r\n            },\r\n          });\r\n          console.log('login response:', response);\r\n\r\n          if (response.data?.login.errors) {\r\n            setErrors(toErrorMap(response.data.login.errors));\r\n          } else if (response.data?.login.user) {\r\n            // worked\r\n            router.replace('/');\r\n          }\r\n        }}>\r\n        {({ isSubmitting }) => (\r\n          <Form>\r\n            <Box mt={4}>\r\n              <InputField label='Username or Email' name='usernameOrEmail' />\r\n            </Box>\r\n            <Box mt={4}>\r\n              <InputField label='Password' name='password' type='password' />\r\n            </Box>\r\n            <Button type='submit' colorScheme='teal' mt={4} isLoading={isSubmitting}>\r\n              Login\r\n            </Button>\r\n          </Form>\r\n        )}\r\n      </Formik>\r\n    </Wrapper>\r\n  );\r\n};\r\n\r\nexport default Login;\r\n"]},"metadata":{},"sourceType":"module"}