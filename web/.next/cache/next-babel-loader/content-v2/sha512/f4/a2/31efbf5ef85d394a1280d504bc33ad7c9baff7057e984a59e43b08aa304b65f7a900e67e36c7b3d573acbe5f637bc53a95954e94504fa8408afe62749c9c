{"ast":null,"code":"import { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nimport _regeneratorRuntime from \"D:/Web Development/GraphQL/lireddit (apollo)/web/node_modules/next/node_modules/@babel/runtime/regenerator\";\nimport _asyncToGenerator from \"D:/Web Development/GraphQL/lireddit (apollo)/web/node_modules/next/node_modules/@babel/runtime/helpers/esm/asyncToGenerator\";\nimport _slicedToArray from \"D:/Web Development/GraphQL/lireddit (apollo)/web/node_modules/next/node_modules/@babel/runtime/helpers/esm/slicedToArray\";\n\nvar _jsxFileName = \"D:\\\\Web Development\\\\GraphQL\\\\lireddit (apollo)\\\\web\\\\src\\\\pages\\\\register.tsx\",\n    _this = this,\n    _s = $RefreshSig$();\n\nimport { Button } from '@chakra-ui/button';\nimport { Box } from '@chakra-ui/layout';\nimport { Form, Formik } from 'formik';\nimport { useRouter } from 'next/router';\nimport InputField from '../components/InputField';\nimport Wrapper from '../components/Wrapper';\nimport { MeDocument, useRegisterMutation } from '../generated/graphql';\nimport { toErrorMap } from '../utils/toErrorMap';\n\nvar Register = function Register() {\n  _s();\n\n  var _useRegisterMutation = useRegisterMutation(),\n      _useRegisterMutation2 = _slicedToArray(_useRegisterMutation, 1),\n      register = _useRegisterMutation2[0];\n\n  var router = useRouter();\n  return /*#__PURE__*/_jsxDEV(Wrapper, {\n    variant: \"small\",\n    children: /*#__PURE__*/_jsxDEV(Formik, {\n      initialValues: {\n        username: '',\n        email: '',\n        password: ''\n      },\n      onSubmit: /*#__PURE__*/function () {\n        var _ref2 = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee(values, _ref) {\n          var _response$data, _response$data2;\n\n          var setErrors, response;\n          return _regeneratorRuntime.wrap(function _callee$(_context) {\n            while (1) {\n              switch (_context.prev = _context.next) {\n                case 0:\n                  setErrors = _ref.setErrors;\n                  _context.next = 3;\n                  return register({\n                    variables: {\n                      options: values\n                    },\n                    update: function update(cache, _ref3) {\n                      var data = _ref3.data;\n                      cache.writeQuery({\n                        query: MeDocument,\n                        data: {\n                          __typename: 'Query',\n                          me: data === null || data === void 0 ? void 0 : data.register.user\n                        }\n                      });\n                    }\n                  });\n\n                case 3:\n                  response = _context.sent;\n\n                  if ((_response$data = response.data) !== null && _response$data !== void 0 && _response$data.register.errors) {\n                    setErrors(toErrorMap(response.data.register.errors));\n                  } else if ((_response$data2 = response.data) !== null && _response$data2 !== void 0 && _response$data2.register.user) {\n                    // worked\n                    router.replace('/');\n                  }\n\n                case 5:\n                case \"end\":\n                  return _context.stop();\n              }\n            }\n          }, _callee);\n        }));\n\n        return function (_x, _x2) {\n          return _ref2.apply(this, arguments);\n        };\n      }(),\n      children: function children(_ref4) {\n        var isSubmitting = _ref4.isSubmitting;\n        return /*#__PURE__*/_jsxDEV(Form, {\n          children: [/*#__PURE__*/_jsxDEV(Box, {\n            mt: 4,\n            children: /*#__PURE__*/_jsxDEV(InputField, {\n              label: \"Username\",\n              name: \"username\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 43,\n              columnNumber: 15\n            }, _this)\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 42,\n            columnNumber: 13\n          }, _this), /*#__PURE__*/_jsxDEV(Box, {\n            mt: 4,\n            children: /*#__PURE__*/_jsxDEV(InputField, {\n              label: \"Email\",\n              name: \"email\",\n              type: \"email\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 46,\n              columnNumber: 15\n            }, _this)\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 45,\n            columnNumber: 13\n          }, _this), /*#__PURE__*/_jsxDEV(Box, {\n            mt: 4,\n            children: /*#__PURE__*/_jsxDEV(InputField, {\n              label: \"Password\",\n              name: \"password\",\n              type: \"password\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 49,\n              columnNumber: 15\n            }, _this)\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 48,\n            columnNumber: 13\n          }, _this), /*#__PURE__*/_jsxDEV(Button, {\n            type: \"submit\",\n            colorScheme: \"teal\",\n            mt: 4,\n            isLoading: isSubmitting,\n            children: \"Register\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 51,\n            columnNumber: 13\n          }, _this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 41,\n          columnNumber: 11\n        }, _this);\n      }\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 16,\n      columnNumber: 7\n    }, _this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 15,\n    columnNumber: 5\n  }, _this);\n};\n\n_s(Register, \"ddLK0/nSZ88s9dnhWsFncWP93QE=\", false, function () {\n  return [useRegisterMutation, useRouter];\n});\n\n_c = Register;\nexport default Register;\n\nvar _c;\n\n$RefreshReg$(_c, \"Register\");","map":{"version":3,"sources":["D:/Web Development/GraphQL/lireddit (apollo)/web/src/pages/register.tsx"],"names":["Button","Box","Form","Formik","useRouter","InputField","Wrapper","MeDocument","useRegisterMutation","toErrorMap","Register","register","router","username","email","password","values","setErrors","variables","options","update","cache","data","writeQuery","query","__typename","me","user","response","errors","replace","isSubmitting"],"mappings":"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","sourcesContent":["import { Button } from '@chakra-ui/button';\r\nimport { Box } from '@chakra-ui/layout';\r\nimport { Form, Formik } from 'formik';\r\nimport { useRouter } from 'next/router';\r\nimport InputField from '../components/InputField';\r\nimport Wrapper from '../components/Wrapper';\r\nimport { MeDocument, MeQuery, useRegisterMutation } from '../generated/graphql';\r\nimport { toErrorMap } from '../utils/toErrorMap';\r\n\r\nconst Register = () => {\r\n  const [register] = useRegisterMutation();\r\n  const router = useRouter();\r\n\r\n  return (\r\n    <Wrapper variant='small'>\r\n      <Formik\r\n        initialValues={{ username: '', email: '', password: '' }}\r\n        onSubmit={async (values, { setErrors }) => {\r\n          const response = await register({\r\n            variables: {\r\n              options: values,\r\n            },\r\n            update: (cache, { data }) => {\r\n              cache.writeQuery<MeQuery>({\r\n                query: MeDocument,\r\n                data: {\r\n                  __typename: 'Query',\r\n                  me: data?.register.user,\r\n                },\r\n              });\r\n            },\r\n          });\r\n          if (response.data?.register.errors) {\r\n            setErrors(toErrorMap(response.data.register.errors));\r\n          } else if (response.data?.register.user) {\r\n            // worked\r\n            router.replace('/');\r\n          }\r\n        }}>\r\n        {({ isSubmitting }) => (\r\n          <Form>\r\n            <Box mt={4}>\r\n              <InputField label='Username' name='username' />\r\n            </Box>\r\n            <Box mt={4}>\r\n              <InputField label='Email' name='email' type='email' />\r\n            </Box>\r\n            <Box mt={4}>\r\n              <InputField label='Password' name='password' type='password' />\r\n            </Box>\r\n            <Button type='submit' colorScheme='teal' mt={4} isLoading={isSubmitting}>\r\n              Register\r\n            </Button>\r\n          </Form>\r\n        )}\r\n      </Formik>\r\n    </Wrapper>\r\n  );\r\n};\r\n\r\nexport default Register;\r\n"]},"metadata":{},"sourceType":"module"}