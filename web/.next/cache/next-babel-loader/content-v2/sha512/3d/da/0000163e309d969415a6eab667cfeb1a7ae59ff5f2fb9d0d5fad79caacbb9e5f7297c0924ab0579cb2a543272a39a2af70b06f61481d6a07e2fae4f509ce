{"ast":null,"code":"import { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nvar _jsxFileName = \"D:\\\\Web Development\\\\GraphQL\\\\lireddit (apollo)\\\\web\\\\src\\\\components\\\\InputField.tsx\";\n\nfunction ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }\n\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }\n\nfunction _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }\n\nfunction _objectWithoutProperties(source, excluded) { if (source == null) return {}; var target = _objectWithoutPropertiesLoose(source, excluded); var key, i; if (Object.getOwnPropertySymbols) { var sourceSymbolKeys = Object.getOwnPropertySymbols(source); for (i = 0; i < sourceSymbolKeys.length; i++) { key = sourceSymbolKeys[i]; if (excluded.indexOf(key) >= 0) continue; if (!Object.prototype.propertyIsEnumerable.call(source, key)) continue; target[key] = source[key]; } } return target; }\n\nfunction _objectWithoutPropertiesLoose(source, excluded) { if (source == null) return {}; var target = {}; var sourceKeys = Object.keys(source); var key, i; for (i = 0; i < sourceKeys.length; i++) { key = sourceKeys[i]; if (excluded.indexOf(key) >= 0) continue; target[key] = source[key]; } return target; }\n\nimport { FormControl, FormErrorMessage, FormLabel } from '@chakra-ui/form-control';\nimport { Input } from '@chakra-ui/input';\nimport { useField } from 'formik';\n\nconst InputField = (_ref) => {\n  let {\n    label,\n    size: _\n  } = _ref,\n      props = _objectWithoutProperties(_ref, [\"label\", \"size\"]);\n\n  const [field, {\n    error\n  }] = useField(props);\n  return /*#__PURE__*/_jsxDEV(FormControl, {\n    isInvalid: !!error,\n    children: [/*#__PURE__*/_jsxDEV(FormLabel, {\n      htmlFor: field.name,\n      children: label\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 15,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(Input, _objectSpread(_objectSpread(_objectSpread({}, field), props), {}, {\n      id: field.name\n    }), void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 16,\n      columnNumber: 7\n    }, this), error && /*#__PURE__*/_jsxDEV(FormErrorMessage, {\n      children: error\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 17,\n      columnNumber: 17\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 14,\n    columnNumber: 5\n  }, this);\n};\n\nexport default InputField;","map":{"version":3,"sources":["D:/Web Development/GraphQL/lireddit (apollo)/web/src/components/InputField.tsx"],"names":["FormControl","FormErrorMessage","FormLabel","Input","useField","InputField","label","size","_","props","field","error","name"],"mappings":";;;;;;;;;;;;;AAAA,SAASA,WAAT,EAAsBC,gBAAtB,EAAwCC,SAAxC,QAAyD,yBAAzD;AACA,SAASC,KAAT,QAAsB,kBAAtB;AACA,SAASC,QAAT,QAAyB,QAAzB;;AAOA,MAAMC,UAAqC,GAAG,UAAkC;AAAA,MAAjC;AAAEC,IAAAA,KAAF;AAASC,IAAAA,IAAI,EAAEC;AAAf,GAAiC;AAAA,MAAZC,KAAY;;AAC9E,QAAM,CAACC,KAAD,EAAQ;AAAEC,IAAAA;AAAF,GAAR,IAAqBP,QAAQ,CAACK,KAAD,CAAnC;AAEA,sBACE,QAAC,WAAD;AAAa,IAAA,SAAS,EAAE,CAAC,CAACE,KAA1B;AAAA,4BACE,QAAC,SAAD;AAAW,MAAA,OAAO,EAAED,KAAK,CAACE,IAA1B;AAAA,gBAAiCN;AAAjC;AAAA;AAAA;AAAA;AAAA,YADF,eAEE,QAAC,KAAD,gDAAWI,KAAX,GAAsBD,KAAtB;AAA6B,MAAA,EAAE,EAAEC,KAAK,CAACE;AAAvC;AAAA;AAAA;AAAA;AAAA,YAFF,EAGGD,KAAK,iBAAI,QAAC,gBAAD;AAAA,gBAAmBA;AAAnB;AAAA;AAAA;AAAA;AAAA,YAHZ;AAAA;AAAA;AAAA;AAAA;AAAA,UADF;AAOD,CAVD;;AAYA,eAAeN,UAAf","sourcesContent":["import { FormControl, FormErrorMessage, FormLabel } from '@chakra-ui/form-control';\r\nimport { Input } from '@chakra-ui/input';\r\nimport { useField } from 'formik';\r\n\r\ntype InputFieldProps = React.InputHTMLAttributes<HTMLInputElement> & {\r\n  label: string;\r\n  name: string;\r\n};\r\n\r\nconst InputField: React.FC<InputFieldProps> = ({ label, size: _, ...props }) => {\r\n  const [field, { error }] = useField(props);\r\n\r\n  return (\r\n    <FormControl isInvalid={!!error}>\r\n      <FormLabel htmlFor={field.name}>{label}</FormLabel>\r\n      <Input {...field} {...props} id={field.name} />\r\n      {error && <FormErrorMessage>{error}</FormErrorMessage>}\r\n    </FormControl>\r\n  );\r\n};\r\n\r\nexport default InputField;\r\n"]},"metadata":{},"sourceType":"module"}